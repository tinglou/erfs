/* automatically generated by rust-bindgen */

pub const RfsGenOption_RFSGEN_GZIPPED: RfsGenOption = 2;
pub const RfsGenOption_RFSGEN_RUST: RfsGenOption = 4;
pub type RfsGenOption = u32;
pub const RfsGenStatusCode_RFS_GEN_OK: RfsGenStatusCode = 0;
pub const RfsGenStatusCode_RFS_SOURCE_TOO_LARGE: RfsGenStatusCode = -100;
pub const RfsGenStatusCode_RFS_TARGET_NOT_EXIST: RfsGenStatusCode = -101;
pub const RfsGenStatusCode_RFS_INVALID_ID: RfsGenStatusCode = -102;
pub const RfsGenStatusCode_RFS_INVALID_OPTION: RfsGenStatusCode = -103;
#[doc = ""]
#[doc = " status code of access api"]
#[doc = ""]
pub type RfsGenStatusCode = i32;
extern "C" {
    #[doc = ""]
    #[doc = " generate RFS source file"]
    #[doc = "@param path the directory or file to be embedded"]
    #[doc = "@param id identity of the FS, format: [a-z][a-z_0-9]*"]
    #[doc = "@param option e.g. gzip text files"]
    #[doc = "@param target_dir target directory"]
    pub fn rfs_generate(
        path: *const ::std::os::raw::c_char,
        id: *const ::std::os::raw::c_char,
        options: ::std::os::raw::c_int,
        target_dir: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
