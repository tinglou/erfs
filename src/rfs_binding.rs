/* automatically generated by rust-bindgen */

pub type RfsRoot = *const ::std::os::raw::c_void;
pub type RfsHandle = *const ::std::os::raw::c_void;
pub const RfsEntryFlags_RFS_DIRECTORY: RfsEntryFlags = 1;
pub const RfsEntryFlags_RFS_GZIPPED: RfsEntryFlags = 2;
#[doc = ""]
#[doc = " RFSEntry flags"]
#[doc = ""]
pub type RfsEntryFlags = u32;
pub const RfsStatusCode_RFS_OK: RfsStatusCode = 0;
pub const RfsStatusCode_RFS_INVALID_INPUT: RfsStatusCode = -1;
pub const RfsStatusCode_RFS_NOT_FOUND: RfsStatusCode = -2;
pub const RfsStatusCode_RFS_NOT_FILE: RfsStatusCode = -3;
pub const RfsStatusCode_RFS_NOT_DIRECTORY: RfsStatusCode = -4;
pub const RfsStatusCode_RFS_OUTOF_BOUND: RfsStatusCode = -5;
#[doc = ""]
#[doc = " return code of access api"]
#[doc = ""]
pub type RfsStatusCode = i32;
extern "C" {
    #[doc = " read a regular file"]
    #[doc = "@param fs the file system"]
    #[doc = "@param path the file name to read"]
    #[doc = "@param out pointer to the content"]
    #[doc = "@param size file size"]
    #[doc = "@return 0 for success; other for notfound"]
    pub fn rfs_read(
        fs: RfsRoot,
        path: *const u8,
        out: *mut *const u8,
        size: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " open a FS entry"]
    #[doc = "@param fs the file system"]
    #[doc = "@param path the file name to read"]
    #[doc = "@param out handle"]
    #[doc = "@param size file size or entries in the directory"]
    #[doc = "@return 0 for success; other for notfound"]
    pub fn rfs_open(
        fs: RfsRoot,
        path: *const u8,
        out: *mut RfsHandle,
        size: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " get flags of an entry (directry or file)"]
    #[doc = "@param entry entry (directry or file)"]
    #[doc = "@return flags"]
    pub fn rfs_entryflags(entry: RfsHandle) -> u32;
}
extern "C" {
    #[doc = " get name of an entry (directry or file)"]
    #[doc = "@param fs the file system"]
    #[doc = "@param entry entry (directry or file)"]
    #[doc = "@param out pointer to the content"]
    #[doc = "@param size file size"]
    #[doc = "@return 0 for success; other for notfound"]
    pub fn rfs_entryname(
        fs: RfsRoot,
        entry: RfsHandle,
        out: *mut *const u8,
        size: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " read a regular file"]
    #[doc = "@param fs the file system"]
    #[doc = "@param entry the file name"]
    #[doc = "@param out pointer to the content"]
    #[doc = "@param size file size"]
    #[doc = "@return 0 for success; other for notfound"]
    pub fn rfs_readfile(
        fs: RfsRoot,
        entry: RfsHandle,
        out: *mut *const u8,
        size: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " get flags of an entry (directry or file)"]
    #[doc = "@param fs the file system"]
    #[doc = "@param dir directory to read"]
    #[doc = "@param index entry index"]
    #[doc = "@param out out entry"]
    #[doc = "@return 0 for success; other for notfound"]
    pub fn rfs_readdir(
        fs: RfsRoot,
        dir: RfsHandle,
        index: u32,
        out: *mut RfsHandle,
    ) -> ::std::os::raw::c_int;
}
pub const RfsTravelType_RFS_TRAVEL_DIR_ENTER: RfsTravelType = 0;
pub const RfsTravelType_RFS_TRAVEL_DIR_LEAVE: RfsTravelType = 1;
pub const RfsTravelType_RFS_TRAVEL_FILE: RfsTravelType = 2;
pub type RfsTravelType = u32;
pub type rfs_visit = ::std::option::Option<
    unsafe extern "C" fn(
        fs: RfsRoot,
        entry: RfsHandle,
        type_: RfsTravelType,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[doc = " travel the resource filesystem"]
    #[doc = "@param fs the file system"]
    #[doc = "@param func callback function"]
    #[doc = "@param ctx context"]
    #[doc = "@return 0 for success; other for notfound"]
    pub fn rfs_travel(
        fs: RfsRoot,
        func: rfs_visit,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
