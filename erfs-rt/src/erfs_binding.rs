/* automatically generated by rust-bindgen */

pub type p__LINE__ = [::std::os::raw::c_char; 1usize];
pub type ErfsRoot = *const ::std::os::raw::c_void;
pub type ErfsHandle = *const ::std::os::raw::c_void;
pub const ErfsEntryFlags_ERFS_DIRECTORY: ErfsEntryFlags = 1;
pub const ErfsEntryFlags_ERFS_GZIPPED: ErfsEntryFlags = 2;
#[doc = ""]
#[doc = " ERFSEntry flags"]
#[doc = ""]
pub type ErfsEntryFlags = u32;
pub const ErfsStatusCode_ERFS_OK: ErfsStatusCode = 0;
pub const ErfsStatusCode_ERFS_INVALID_INPUT: ErfsStatusCode = -1;
pub const ErfsStatusCode_ERFS_NOT_FOUND: ErfsStatusCode = -2;
pub const ErfsStatusCode_ERFS_NOT_FILE: ErfsStatusCode = -3;
pub const ErfsStatusCode_ERFS_NOT_DIRECTORY: ErfsStatusCode = -4;
pub const ErfsStatusCode_ERFS_OUTOF_BOUND: ErfsStatusCode = -5;
#[doc = ""]
#[doc = " return code of access api"]
#[doc = ""]
pub type ErfsStatusCode = i32;
extern "C" {
    #[doc = " read a regular file"]
    #[doc = "@param fs the file system"]
    #[doc = "@param path the file name to read"]
    #[doc = "@param path_len length of path"]
    #[doc = "@param out pointer to the content"]
    #[doc = "@param size file size"]
    #[doc = "@return 0 for success; other for notfound"]
    pub fn erfs_read(
        fs: ErfsRoot,
        path: *const u8,
        path_len: u32,
        out: *mut *const u8,
        size: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " open a FS entry"]
    #[doc = "@param fs the file system"]
    #[doc = "@param path the file name to read"]
    #[doc = "@param path_len length of path"]
    #[doc = "@param out handle"]
    #[doc = "@param size file size or entries in the directory"]
    #[doc = "@return 0 for success; other for notfound"]
    pub fn erfs_open(
        fs: ErfsRoot,
        path: *const u8,
        path_len: u32,
        out: *mut ErfsHandle,
        size: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " get flags of an entry (directry or file)"]
    #[doc = "@param entry entry (directry or file)"]
    #[doc = "@param flags [out] flags"]
    #[doc = "@return flags"]
    pub fn erfs_entryflags(entry: ErfsHandle, flags: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " get size of an entry (directry or file)"]
    #[doc = "@param entry entry (directry or file)"]
    #[doc = "@param flags [out] size"]
    #[doc = "@return size of file or dirctory"]
    pub fn erfs_entrysize(entry: ErfsHandle, size: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " get name of an entry (directry or file)"]
    #[doc = "@param fs the file system"]
    #[doc = "@param entry entry (directry or file)"]
    #[doc = "@param out pointer to the content"]
    #[doc = "@param size file size"]
    #[doc = "@return 0 for success; other for notfound"]
    pub fn erfs_entryname(
        fs: ErfsRoot,
        entry: ErfsHandle,
        out: *mut *const u8,
        size: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " read a regular file"]
    #[doc = "@param fs the file system"]
    #[doc = "@param entry the file name"]
    #[doc = "@param out pointer to the content"]
    #[doc = "@param size file size"]
    #[doc = "@return 0 for success; other for notfound"]
    pub fn erfs_readfile(
        fs: ErfsRoot,
        entry: ErfsHandle,
        out: *mut *const u8,
        size: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " get flags of an entry (directry or file)"]
    #[doc = "@param fs the file system"]
    #[doc = "@param dir directory to read"]
    #[doc = "@param index entry index"]
    #[doc = "@param out out entry"]
    #[doc = "@return 0 for success; other for notfound"]
    pub fn erfs_readdir(
        fs: ErfsRoot,
        dir: ErfsHandle,
        index: u32,
        out: *mut ErfsHandle,
    ) -> ::std::os::raw::c_int;
}
pub const ErfsTravelType_ERFS_TRAVEL_DIR_ENTER: ErfsTravelType = 0;
pub const ErfsTravelType_ERFS_TRAVEL_DIR_LEAVE: ErfsTravelType = 1;
pub const ErfsTravelType_ERFS_TRAVEL_FILE: ErfsTravelType = 2;
pub type ErfsTravelType = u32;
pub type ErfsVisitFn = ::std::option::Option<
    unsafe extern "C" fn(
        fs: ErfsRoot,
        entry: ErfsHandle,
        type_: ErfsTravelType,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[doc = " travel the resource filesystem"]
    #[doc = "@param fs the file system"]
    #[doc = "@param func callback function"]
    #[doc = "@param ctx context"]
    #[doc = "@return 0 for success; other for notfound"]
    pub fn erfs_travel(
        fs: ErfsRoot,
        func: ErfsVisitFn,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
